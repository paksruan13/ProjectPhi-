datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  STUDENT 
  COACH
  ADMIN
}

model Team {
  id        String    @id @default(uuid())
  name      String    @unique
  teamCode  String    @unique
  isActive  Boolean  @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   User[]
  donations Donation[]
  photos    Photo[]
  shirtSales ShirtSale[]
  coachId   String?
  coach     User?     @relation("CoachTeams", fields: [coachId], references: [id])
  activitySubmissions   ActivitySubmission[]
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String    @default("CHANGE_ME")
  team      Team?     @relation(fields: [teamId], references: [id])
  teamId    String?
  role      UserRole  @default(STUDENT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  donations    Donation[]
  coachedTeams  Team[]  @relation("CoachTeams")
  createdActivities  Activity[]    @relation("CreatedActivities")
  Submissions   ActivitySubmission[]    @relation("UserSubmissions")
  reviewedSubmissions   ActivitySubmission[]    @relation("ReviewedSubmissions")
}

model Donation {
  id              String   @id @default(cuid())
  amount          Float
  currency        String   @default("usd")
  stripeSessionId String?  @unique
  createdAt       DateTime @default(now())
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?
  team            Team     @relation(fields: [teamId], references: [id])
  teamId          String
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  approved  Boolean  @default(false)
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  uploadedAt DateTime @default(now())
}

model ShirtSale {
  id        String   @id @default(uuid())
  quantity  Int
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  soldAt    DateTime @default(now())
}

model ActivityCategory {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  color       String? //for UI
  icon        String?
  activities  Activity[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Activity {
  id          String      @id @default(uuid())
  title       String
  description String
  points      Int
  isPublished Boolean     @default(false)
  isActive    Boolean     @default(true)
  requirements  Json?
  categoryId  String
  category    ActivityCategory @relation(fields: [categoryId], references: [id])
  submission  ActivitySubmission[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String?
  createdBy   User?       @relation("CreatedActivities", fields: [createdById], references: [id])
}

model ActivitySubmission {
  id             String       @id @default(uuid())
  activityId     String
  activity       Activity     @relation(fields: [activityId], references: [id])
  userId         String       
  user           User         @relation("UserSubmissions", fields: [userId], references: [id])
  teamId         String?      
  team           Team?        @relation(fields: [teamId], references: [id])
  submissionData Json?        
  notes          String?
  pointsAwarded  Int?
  status         SubmissionStatus   @default(PENDING)
  reviewedById   String?
  reviewedBy     User?        @relation("ReviewedSubmissions", fields: [reviewedById], references: [id])
  reviewNotes    String?
  created        DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  reviewedAt     DateTime?
}


enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  DRAFT
}

